#!/usr/bin/env node // 表明是 node 可执行文件

/**
 * Module dependencies.
 */

var app = require('../app');// 引入我们上面导出的app实例
var debug = require('debug')('test-blog:server'); // 引入debug模块，打印调试日志
var http = require('http');
var dbFunc = require('../routes/dbFuc')
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000'); //设置端口号
app.set('port', port);
console.log('port at :' + port)

/**
 * Create HTTP server.
 */

// var server = http.createServer(app);

var server = app.listen(port);
var io = require('socket.io').listen(server);
var interval;
io.sockets.on('connection', (socket) => {
  socket.on('login', (data) => { // 用户已登录时，开始以下处理
    interval = setInterval(() => {// 不断请求数据库，将消息发送给客户端
      findNotices(data.blogId).then(res => {
        socket.emit('getNotice', {
          msg: res.data,
          code: 200
        });
      })
    }, 1000);
  })
  socket.on('logout', (data)=> {
    clearInterval(interval)
  })
});

function findNotices(blogId) {
  var findData = {
    collectName: 'noticeDatas',
    condition: { whatReceiveId: blogId } // 按userId即id去查询
  }

  return dbFunc.finddbData(findData).then(ress => { //{ collectName：xxx, condition:xxx } //先查询数据
    // 存在此用户，检测密码
    return ress.length === 0 ? ({
      code: 200,
      data: [],
      msg: '暂无notice'

    }) : ({
      code: 200,
      data: ress,
      msg: '获取notice数据成功!'

    })
  })
}

/* var io =  require('socket.io')(server)
var broadcast = require('./broadcast')
var clients = {}
var count = 0;
io.on('connection',(socket)=>{
    socket.name = ++count;
    clients[socket.name] = socket
    
    socket.on('disconnect',()=>{
        delete clients[socket.name]     //断开链接
    })
})

broadcast.on('hahaha',function(message){    //将服务端的信息分发给各个客户端
  for(var name in clients){
      clients[name].send(message)
  }
}) */
/**
 * Listen on provided port, on all network interfaces.
 */

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
